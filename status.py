import aiohttp
import datetime
import socket
import asyncio
import time
import platform
import psutil
import speedtest
from pyrogram import types


def get_cpu_temperature():
    system = platform.system()
    if system == 'Linux':
        try:
            temps = psutil.sensors_temperatures()
            if not temps:
                return "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            for name, entries in temps.items():
                for entry in entries:
                    if entry.current:
                        return f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {name}: {entry.current}¬∞C"
            return "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        except Exception as e:
            return f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ({e})"
    elif system == 'Windows':
        return f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –≤–∏–Ω–¥–æ–≤—Å –º–æ–º–µ–Ω—Ç"
    else:
        return "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"


async def status_command(client, message: types.Message):
    me = await client.get_me()
    if message.from_user and message.from_user.id == me.id:
        await message.delete()

    status_lines = []

    message = await message.reply('Wait a minute...')

    # –ê–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º—ã
    uptime_seconds = time.time() - psutil.boot_time()
    uptime_str = str(datetime.timedelta(seconds=int(uptime_seconds)))
    status_lines.append(f"‚è±Ô∏è –ê–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º—ã: {uptime_str}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ CPU & RAM
    cpu_usage = psutil.cpu_percent(interval=1)
    ram_usage = psutil.virtual_memory().percent
    status_lines.append(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}%")
    status_lines.append(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ RAM: {ram_usage}%")

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    status_lines.append(get_cpu_temperature())

    # –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
    disk = psutil.disk_usage('/')
    status_lines.append(
        f"üíΩ –î–∏—Å–∫: {round(disk.used / 1024 ** 3, 1)}–ì–ë / {round(disk.total / 1024 ** 3, 1)}–ì–ë ({disk.percent}%) –∑–∞–Ω—è—Ç–æ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    internet_available = False
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://1.1.1.1', timeout=5):
                internet_available = True
                status_lines.append("üîå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception:
        status_lines.append("üîå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –õ–æ–∫–∞–ª—å–Ω—ã–π IP
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        status_lines.append(f"üíª –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}")
    except Exception:
        status_lines.append("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π IP: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")

    # –ü–∏–Ω–≥
    if internet_available:
        try:
            start = time.time()
            reader, writer = await asyncio.open_connection('astatdeglebantiy.github.io', 80)
            end = time.time()
            writer.close()
            await writer.wait_closed()
            ping_ms = round((end - start) * 1000, 2)
            status_lines.append(f"üì° –ü–∏–Ω–≥ –¥–æ astatdeglebantiy.github.io: {ping_ms} –º—Å")
        except Exception:
            status_lines.append("üì° –ü–∏–Ω–≥ –¥–æ astatdeglebantiy.github.io: –æ—à–∏–±–∫–∞")
    else:
        status_lines.append("üì° –ü–∏–Ω–≥ –¥–æ astatdeglebantiy.github.io: –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")

    # –í—Ä–µ–º—è
    utc_now = datetime.datetime.now(datetime.UTC)
    local_now = datetime.datetime.now()
    status_lines.append(f"üïí –í—Ä–µ–º—è (UTC): {utc_now.strftime('%Y-%m-%d %H:%M:%S')}")
    status_lines.append(f"üïí –í—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ): {local_now.strftime('%Y-%m-%d %H:%M:%S')}")

    # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('http://ip-api.com/json/') as resp:
                data = await resp.json()
                if data['status'] == 'success':
                    location = f"{data['country']}, {data['regionName']}, {data['city']}"
                    status_lines.append(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}")
                else:
                    status_lines.append("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
    except Exception:
        status_lines.append("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    try:
        uname = platform.uname()
        cpu_count = psutil.cpu_count(logical=True)
        ram = round(psutil.virtual_memory().total / (1024 ** 3), 2)
        status_lines.append(f"üñ•Ô∏è –û–°: {uname.system} {uname.release} ({uname.machine})")
        status_lines.append(f"üß† CPU: {uname.processor} | –Ø–¥–µ—Ä: {cpu_count}")
        status_lines.append(f"üíæ RAM: {ram} –ì–ë")
    except Exception:
        status_lines.append("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ—à–∏–±–∫–∞")

    # –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    if internet_available:
        try:
            st = speedtest.Speedtest()
            st.get_best_server()
            download = st.download() / 1_000_000  # Mbps
            upload = st.upload() / 1_000_000
            status_lines.append(f"‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {download:.2f} –ú–±–∏—Ç/—Å")
            status_lines.append(f"‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏: {upload:.2f} –ú–±–∏—Ç/—Å")
        except Exception as e:
            status_lines.append("üì∂ –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –æ—à–∏–±–∫–∞")
    else:
        status_lines.append("üì∂ –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")

    await message.edit("\n".join(status_lines))
